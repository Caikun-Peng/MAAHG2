name: build and release

on:
  push:
    tags:
      - "v*"
    branches:
      - "main"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "config/**"
      - "src/**"
  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "config/**"
      - "src/**"
  workflow_dispatch:

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  windows:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install pipreqs
          pipreqs src --encoding=utf8 --savepath src/requirementstemp.txt
          pip install -r src/requirements.txt
          pip install -r src/requirementstemp.txt

      - name: Install
        shell: bash
        run: |
          python ./build.py ${{ needs.meta.outputs.tag }}

      - uses: actions/upload-artifact@v3
        with:
          name: MAAHG2-win-${{ matrix.arch }}
          path: "./"

      - name: Move executable to root
        run: |
          move dist/MAAHG2.exe .

  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    needs: [meta, windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: assets

      - run: |
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done
      - uses: softprops/action-gh-release@v1
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}